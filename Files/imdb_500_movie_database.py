# -*- coding: utf-8 -*-
"""IMDB 500 Movie Database

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1znTLiEoo32sYJdVRaXZ_xEG9sD7Cml-b

# IMDB Top 500 Movie Database
Swopnil N. Shrestha | 
Version 1.0 | 
Last Modified: 02/10/2018

## Scrape the IMDB Page
"""

# DataFrame Manipulation 
import pandas as pd
import numpy as np

# Visualization 
import matplotlib.pyplot as plt

# HTML Parsing
import re
import requests
from bs4 import BeautifulSoup 
import ssl 

import urllib

# Read the HTML from the URL

url = 'https://www.imdb.com/list/ls003073623/'
print("Opening the file connection...")

html = urllib.request.urlopen(url).read()
print("Opened file..." + "\n{} characters parsed".format(len(html)))

"""## Parse HTML using BeautifulSoup"""

# Use BeautifulSoup to parse the document
soup = BeautifulSoup(html, 'html.parser')
list_movies = soup.find("script" , {"type" : "application/ld+json"})

# Extract main json from html
json_file = list_movies.text

print("Extracted json file from HTML....\n" + "-" * 33 + "\n")
print(json_file)

import json
wjdata = json.loads(json_file)
film_jdata = wjdata['about']['itemListElement']
print(film_jdata)

raw_json = str(film_jdata).strip("[]")

url_list = {}
position = 0
for film in film_jdata:
  position += 1
  url_list[position] = film['url'][7:-1]

url_list

"""## Read JSON from API"""

api_key = '852159f0'
tt_id = 'tt0068646'
api_url = 'http://www.omdbapi.com/?apikey=' + api_key + "&i=" + tt_id
json_data = urllib.request.urlopen(api_url).read()

df = pd.read_json(json_data)

json_data = {}
counter = 0
total_movies = len(url_list)

api_key = '852159f0'
for value in url_list.values():
  
  tt_id = value
  api_url = 'http://www.omdbapi.com/?apikey=' + api_key + "&i=" + tt_id
  json_data[counter] = urllib.request.urlopen(api_url).read()
  if counter % 20 == 0: print("Fetching movie {} of {}".format(counter, total_movies))
  counter += 1 

print("Fetched {} of {} movies..".format(len(json_data), total_movies))

json_data

"""## JSON to Pandas"""

from pandas.io.json import json_normalize

main_df = pd.DataFrame(columns=['Title','Year','Rated','Released','Runtime','Genre','Director','Writer','Actors','Plot','Language','Country','Awards','Poster','Metascore','imdbRating','imdbVotes','imdbID', 'DVD','BoxOffice','Production'])


for movie in json_data.values():
  movie_from_json = json.loads(movie)
  df_init = json_normalize(movie_from_json)
  
  if 'DVD'not in df_init: df_init['DVD'] = np.NaN
  if 'BoxOffice'not in df_init: df_init['BoxOffice'] = np.NaN
  if 'Production' not in df_init: df_init['Production'] = np.NaN

  main_df = main_df.append(df_init[['Title','Year','Rated','Released','Runtime','Genre','Director','Writer','Actors','Plot','Language','Country','Awards','Poster','Metascore','imdbRating','imdbVotes','imdbID', 'DVD','BoxOffice','Production']])


main_df = main_df.set_index('Title')

main_df

# Clean and convert 'BoxOffice' data to 'float64'

main_df.BoxOffice = main_df['BoxOffice'].str.strip("$&pound;a").str.replace(",","").replace("N/A",np.nan).replace("",np.nan)
main_df.BoxOffice = main_df.BoxOffice.astype('float64')

# Clean and convert 'Year' data to "int64"

main_df.Year = main_df.Year.str.strip("â€“")
main_df.Year = main_df.Year.astype("int64")

min_year = min(main_df.Year)
convert_to_year = 2018
if ((convert_to_year - min_year) % 10 ) > 0: last_round = 1
itr = ((convert_to_year - min_year) // 10 ) + last_round

# Get data from BLS API


bls_df = pd.DataFrame(columns=["periodName","value","year"])

try:
  for i in range(itr):

    start = min_year + (i * 10)
    end = start + 10
    if i == itr - 1: end = start + (2018 - min_year) % 10



    # Getting Data
    bls_headers = {'Content-type': 'application/json'}
    bls_data = json.dumps({"seriesid": ['CUUR0000SA0'],"startyear":str(start), "endyear":str(end)})
    p = requests.post('https://api.bls.gov/publicAPI/v2/timeseries/data/', data=bls_data, headers=bls_headers)
    bls_json_data = json.loads(p.text)

    print("Quering for data from {} to {}..".format(start, end))

    # DataFrame
    bls = bls_json_data['Results']["series"][0]["data"]
    bls_init = pd.DataFrame(bls)[["periodName","value","year"]]
    bls_init.year = bls_init.year.astype('int64')
    bls_init.value = bls_init.value.astype('float64')

    print("Query {} of {} success..".format(i, itr))

    bls_df = bls_df.append(bls_init)

except KeyError:
  
  raise RuntimeError("Error: BLS API Limit Reached")

bls_df.value = bls_df.value.astype('float64')

inflation_data = bls_df.groupby("year").value.mean()

inflation_ratio = inflation_data[2018] / inflation_data

revenue_current = []

[revenue_current.append((inflation_ratio[year] * revenue)) for revenue, year in zip(main_df['BoxOffice'],main_df['Year'])] # cross reference and multiply year with inflation ratio
  
revenue_current

new_col_name = "BoxOffice" + str(convert_to_year) + "$"
main_df[new_col_name] = pd.Series(revenue_current).astype("float64")

main_df["Rank"] = pd.Series(list(range(1, 501))).values # Add rank information

main_df[['Rank','Year', 'Rated', 'Released', 'Runtime', 'Genre', 'Director', 'Writer','Actors', 'Plot', 'Language', 'Country', 'Awards', 'Poster','Metascore', 'imdbRating', 'imdbVotes', 'imdbID', 'DVD', 'BoxOffice', new_col_name ,'Production']]

main_df = main_df.to_csv("imdb_top_500.csv", sep=",")

print("Process completed.. \nFile saved as 'imdb_top_500.csv'")

# Run if 

# from google.colab import files

# uploaded = files.download("imdb_top_500.csv")